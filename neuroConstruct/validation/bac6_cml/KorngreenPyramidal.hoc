//  ******************************************************
// 
//     File generated by: neuroConstruct v1.7.1
// 
//  ******************************************************

{load_file("nrngui.hoc")}

//  Initialising stopwatch for timing setup

{startsw()}

print ""
print "*****************************************************"
print ""
print "    neuroConstruct generated NEURON simulation "
print "    for project: /Users/borismarin/git/korngreen-pyramidal/neuroConstruct/KorngreenPyramidal.ncx "
print ""
print "    Description: Conversion to neuroConstruct and NeuroML of the L5 Pyramidal cell model described in:"
print "    "
print "    Almog M, Korngreen A (2014) A Quantitative Description of Dendritic Conductances and Its Application to Dendritic Excitation in Layer 5 Pyramidal Neurons J Neurosci 34(1):182-196"
print ""
print "    Simulation Configuration: SimConfig: bac6 "
print "    Replicating bac6.ses from modelDB "
print " "
print  "*****************************************************"

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd

objectvar allCells
{allCells = new List()}


//  A flag to signal simulation was generated by neuroConstruct 

{nC = 1}


//  Including neuroConstruct utilities file 

{load_file("nCtools.hoc")}

//  Including neuroConstruct cell check file 

{load_file("cellCheck.hoc")}

//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

{use_mcell_ran4(1)}

{mcell_ran4_init(1422257359)}







//////////////////////////////////////////////////////////////////////
//   Cell group 7: FullCell_nml has cells of type: A140612_nml
//////////////////////////////////////////////////////////////////////


//  Adding cell template file: A140612_nml.hoc for cell group FullCell_nml

{ load_file("A140612_nml.hoc") }

//  Adding 1 cells of type A140612_nml in region Regions_1

{n_FullCell_nml = 1}

{n_FullCell_nml_local = 0 } // actual number created on this host

objectvar a_FullCell_nml[n_FullCell_nml]

proc addCell_FullCell_nml() {
    strdef reference
    sprint(reference, "FullCell_nml_%d", $1)
    a_FullCell_nml[$1] = new A140612_nml(reference, "A140612_nml", "Cell: a_soma exported from NEURON ModelView")
    allCells.append(a_FullCell_nml[$1])
}

for i = 0, n_FullCell_nml-1 {
    addCell_FullCell_nml(i)
    n_FullCell_nml_local = n_FullCell_nml_local +1 

}


//  Placing these cells in a region described by: Sphere at: (0.0, 0.0, 0.0) with radius: 1000.0


//  Packing has been generated by: Random: num: 1, edge: 1, overlap: 1, other overlap: 1

{a_FullCell_nml[0].position(418.03308,23.828003,-575.73486)}


//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "bac6"}
{celsius = 34.0}


//      Note: the following values are from IonProperties in Cell



proc initialiseValues0() {


//  Setting initial vals in cell group: FullCell_nml which has 1 cells


//  Giving all cells an initial potential of: -70.0

    for i = 0, n_FullCell_nml-1 {
        forsec a_FullCell_nml[i].all  v = -70.0

    }

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}


proc initialiseValues1() {

    for i = 0, n_FullCell_nml-1 {
        forsec a_FullCell_nml[i].all {
            cai = 5.0000002E-5
            cao = 2.0
        }
        forsec a_FullCell_nml[i].all { ena = 60.0}
        forsec a_FullCell_nml[i].apical_dend_group { eh = -33.0}
        forsec a_FullCell_nml[i].basal_dend_group { eh = -33.0}
        forsec a_FullCell_nml[i].soma_group { eh = -33.0}
        forsec a_FullCell_nml[i].all { ek = -100.0}
    }

}

objref fih1
{fih1 = new FInitializeHandler(1, "initialiseValues1()")}



//////////////////////////////////////////////////////////////////////
//   Adding Network Connections
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
//   Adding 1 stimulation(s)
//////////////////////////////////////////////////////////////////////

{ n_stim_bac6_IClamp_Soma_nml = 1 }
objectvar stim_bac6_IClamp_Soma_nml[n_stim_bac6_IClamp_Soma_nml]


//  Note: the stimulation was specified as being at a point 0.5 along segment: Seg0_a_soma

//  in section: a_soma. For NEURON, this translates to a point 0.025000198 along section: a_soma

a_FullCell_nml[0].a_soma {
    stim_bac6_IClamp_Soma_nml[0] = new CurrentClampExt(0.025000198)
    stim_bac6_IClamp_Soma_nml[0].del = 400.0
    stim_bac6_IClamp_Soma_nml[0].dur = 20.0
    stim_bac6_IClamp_Soma_nml[0].amp = 0.5
    stim_bac6_IClamp_Soma_nml[0].repeat = 0
}


access A140612_nml[0].a_soma

//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


tstop = 500.0
dt = 0.0125
steps_per_ms = 80.0

//////////////////////////////////////////////////////////////////////
//   Adding 3 plot(s)
//////////////////////////////////////////////////////////////////////


//   This code pops up a plot of a_FullCell_nml[0].apic_41.v(0.26212445)

objref FullCell_nml_v
FullCell_nml_v = new Graph(0)
{FullCell_nml_v.size(0, tstop,-90.0,50.0)}
{FullCell_nml_v.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)}
{
    FullCell_nml_v.addexpr("a_FullCell_nml[0].apic_41.v", "a_FullCell_nml[0].apic_41.v(0.26212445)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(FullCell_nml_v)
}

//   This code pops up a plot of a_FullCell_nml[0].apic_41.v(0.61474127)

{
    FullCell_nml_v.addexpr("a_FullCell_nml[0].apic_41.v", "a_FullCell_nml[0].apic_41.v(0.61474127)", 2, 1, 0.8, 0.9, 2)
    graphList[0].append(FullCell_nml_v)
}

//   This code pops up a plot of a_FullCell_nml[0].a_soma.v(0.025000198)

{
    FullCell_nml_v.addexpr("a_FullCell_nml[0].a_soma.v", "a_FullCell_nml[0].a_soma.v(0.025000198)", 3, 1, 0.8, 0.9, 2)
    graphList[0].append(FullCell_nml_v)
}

//////////////////////////////////////////////////////////////////////
//   This will run a full simulation of 40001 steps when the hoc file is executed
//////////////////////////////////////////////////////////////////////


//  Recording 3 variable(s)

objref v_time
objref f_time
objref propsFile

v_time = new Vector()
{ v_time.record(&t) }
{ v_time.resize(40001) } // false
f_time = new File()


//  Saving VOLTAGE on only one seg, id: 2674, in the only cell in FullCell_nml


//  Creating vector for segment: Seg45_apic_41(ID: 2674)

objref v_FullCell_nml_seg_Seg45_apic_41_v[1]
for i=0, 0 {
    { v_FullCell_nml_seg_Seg45_apic_41_v[i] = new Vector() }
    { v_FullCell_nml_seg_Seg45_apic_41_v[i].record(&a_FullCell_nml[i].apic_41.v(0.26212445))} 
    { v_FullCell_nml_seg_Seg45_apic_41_v[i].resize(40001) }
}
objref f_FullCell_nml_seg_Seg45_apic_41_v[1]


//  Saving VOLTAGE on only one seg, id: 2720, in the only cell in FullCell_nml


//  Creating vector for segment: Seg91_apic_41(ID: 2720)

objref v_FullCell_nml_seg_Seg91_apic_41_v[1]
for i=0, 0 {
    { v_FullCell_nml_seg_Seg91_apic_41_v[i] = new Vector() }
    { v_FullCell_nml_seg_Seg91_apic_41_v[i].record(&a_FullCell_nml[i].apic_41.v(0.61474127))} 
    { v_FullCell_nml_seg_Seg91_apic_41_v[i].resize(40001) }
}
objref f_FullCell_nml_seg_Seg91_apic_41_v[1]


//  Saving VOLTAGE on only one seg, id: 0, in the only cell in FullCell_nml


//  Creating vector for segment: Seg0_a_soma(ID: 0)

objref v_FullCell_nml_seg_Seg0_a_soma_v[1]
for i=0, 0 {
    { v_FullCell_nml_seg_Seg0_a_soma_v[i] = new Vector() }
    { v_FullCell_nml_seg_Seg0_a_soma_v[i].record(&a_FullCell_nml[i].a_soma.v(0.025000198))} 
    { v_FullCell_nml_seg_Seg0_a_soma_v[i].resize(40001) }
}
objref f_FullCell_nml_seg_Seg0_a_soma_v[1]

//  Note: to change location of the generated simulation files, just change value of targetDir
//  e.g. targetDir="" or targetDir="aSubDir/"

strdef targetDir
{ sprint(targetDir, "./results/")}


//  Single simulation run...

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms,  variable time step"//, reference: ",simReference,""

{currenttime = startsw()}
//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////


//  Setting basic variable time step active

{cvode.active(1)}
{cvode.atol(0.001)}
{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Storing the data..."

strdef timeFilename

//  Saving VOLTAGE on only one seg, id: 2674, in the only cell in FullCell_nml


//  Saving vector for segment: Seg45_apic_41(ID: 2674)

for i=0, 0 {
    f_FullCell_nml_seg_Seg45_apic_41_v[i] = new File()
    strdef filename
    {sprint(filename, "%sFullCell_nml_%d.2674.dat", targetDir, i)}
    f_FullCell_nml_seg_Seg45_apic_41_v[i].wopen(filename)
    v_FullCell_nml_seg_Seg45_apic_41_v[i].printf(f_FullCell_nml_seg_Seg45_apic_41_v[i])
    f_FullCell_nml_seg_Seg45_apic_41_v[i].close()
}


//  Saving VOLTAGE on only one seg, id: 2720, in the only cell in FullCell_nml


//  Saving vector for segment: Seg91_apic_41(ID: 2720)

for i=0, 0 {
    f_FullCell_nml_seg_Seg91_apic_41_v[i] = new File()
    strdef filename
    {sprint(filename, "%sFullCell_nml_%d.2720.dat", targetDir, i)}
    f_FullCell_nml_seg_Seg91_apic_41_v[i].wopen(filename)
    v_FullCell_nml_seg_Seg91_apic_41_v[i].printf(f_FullCell_nml_seg_Seg91_apic_41_v[i])
    f_FullCell_nml_seg_Seg91_apic_41_v[i].close()
}


//  Saving VOLTAGE on only one seg, id: 0, in the only cell in FullCell_nml


//  Saving vector for segment: Seg0_a_soma(ID: 0)

for i=0, 0 {
    f_FullCell_nml_seg_Seg0_a_soma_v[i] = new File()
    strdef filename
    {sprint(filename, "%sFullCell_nml_%d.dat", targetDir, i)}
    f_FullCell_nml_seg_Seg0_a_soma_v[i].wopen(filename)
    v_FullCell_nml_seg_Seg0_a_soma_v[i].printf(f_FullCell_nml_seg_Seg0_a_soma_v[i])
    f_FullCell_nml_seg_Seg0_a_soma_v[i].close()
}


{ sprint(timeFilename, "%s%s", targetDir, "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }

{savetime = stopsw()}

propsFile = new File()
strdef propsFilename
{sprint(propsFilename, "%ssimulator.props", targetDir)}
{propsFile.wopen(propsFilename)}
{propsFile.printf("#This is a list of properties generated by NEURON during the simulation run\n")}
{propsFile.printf("Host=%s\n", host)}
{propsFile.printf("RealSimulationTime=%g\n", realruntime)}
{propsFile.printf("SimulationSaveTime=%g\n", savetime)}
{propsFile.printf("SimulationSetupTime=%g\n", setuptime)}
{propsFile.printf("NEURONversion=%s\n", nrnversion())}
{propsFile.close()}

print "Data stored in ",savetime, "secs in directory: ", targetDir


//   This code pops up a simple Run Control

{
xpanel("RunControl", 0)
v_init = -60.0
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
t = 0
xvalue("t","t", 2 )
tstop = 500.0
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.0125
 xvalue("dt","dt", 1,"setdt()", 0, 1 )
xpanel(80,80)
}

